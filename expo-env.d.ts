/// <reference types="expo/types" />

// NOTE: This file should not be edited and should be in your git ignore.
// It's automatically generated by Expo CLI when you run `expo install`.

// Global type declarations for Expo environment
declare global {
  var __DEV__: boolean;
  
  // Error handling utilities (React Native specific)
  var ErrorUtils: {
    setGlobalHandler: (handler: (error: any, isFatal?: boolean) => void) => void;
    getGlobalHandler: () => ((error: any, isFatal?: boolean) => void) | undefined;
  };
  
  // Performance API
  var performance: {
    now: () => number;
  };
  
  // Crypto API
  var crypto: {
    getRandomValues: <T extends ArrayBufferView | null>(array: T) => T;
  };
  
  // Text encoding/decoding
  var TextEncoder: {
    new(): {
      encode: (string: string) => Uint8Array;
    };
  };
  
  var TextDecoder: {
    new(): {
      decode: (bytes: Uint8Array) => string;
    };
  };
  
  // URL APIs
  var URL: {
    new(url: string, base?: string): {
      href: string;
      protocol: string;
      hostname: string;
      port: string;
      pathname: string;
      search: string;
      hash: string;
      host: string;
      toString: () => string;
    };
  };
  
  var URLSearchParams: {
    new(search?: string): {
      get: (key: string) => string | null;
      set: (key: string, value: string) => void;
      has: (key: string) => boolean;
      delete: (key: string) => void;
      toString: () => string;
    };
  };
}

// Module augmentations for better TypeScript support
declare module "react-native" {
  interface PlatformOSType {
    web: "web";
  }
}

// Expo Router specific types
declare module "expo-router" {
  export interface ExpoRouter {
    push: (path: string) => void;
    replace: (path: string) => void;
    back: () => void;
    canGoBack: () => boolean;
  }
}

// Financial calculations module types
declare module "@/utils/financialCalculations" {
  export interface StockData {
    symbol: string;
    prices: number[];
    dates: string[];
    volumes?: number[];
    returns?: number[];
    currency?: string;
    exchange?: string;
    dataSource?: string;
    fetchTime?: string;
    metadata?: Record<string, any>;
  }
  
  export interface OptimizationResult {
    weights: number[];
    expectedReturn: number;
    volatility: number;
    sharpeRatio: number;
    efficientFrontier?: Array<{ risk: number; return: number; sharpe: number }>;
  }
  
  export interface VaRResult {
    var95: number;
    var99: number;
    expectedShortfall: number;
    volatility: number;
    sharpeRatio: number;
    maxDrawdown: number;
    distribution: number[];
  }
  
  export class VaRCalculator {
    static calculateParametricVaR(returns: number[], confidenceLevel?: number): VaRResult;
    static calculateHistoricalVaR(returns: number[], confidenceLevel?: number): VaRResult;
    static calculateMonteCarloVaR(returns: number[], confidenceLevel?: number, simulations?: number): VaRResult;
  }
  
  export class PortfolioOptimizer {
    static optimizeMaxSharpe(portfolioData: any): OptimizationResult;
    static optimizeTargetReturn(portfolioData: any, targetReturn: number): OptimizationResult;
  }
  
  export class CAPMAnalyzer {
    static analyzeCAPM(assetReturns: number[], marketReturns: number[], riskFreeRate?: number): any;
  }
}

// Chart components types
declare module "@/components/Charts" {
  export interface ChartProps {
    data: any;
    width?: number;
    height?: number;
  }
  
  export const PerformanceChart: React.FC<ChartProps>;
  export const VaRVisualizationChart: React.FC<ChartProps>;
  export const RiskMetricsDashboard: React.FC<ChartProps>;
  export const EfficientFrontierChart: React.FC<ChartProps>;
  export const PortfolioWeightsChart: React.FC<ChartProps>;
  export const CapitalAllocationChart: React.FC<ChartProps>;
  export const CAPMAnalysisChart: React.FC<ChartProps>;
  export const CorrelationMatrixChart: React.FC<ChartProps>;
}

// Error management types
declare module "@/utils/errorManagement" {
  export enum ErrorType {
    NETWORK = 'NETWORK',
    API = 'API',
    CALCULATION = 'CALCULATION',
    DATA_VALIDATION = 'DATA_VALIDATION',
    PERMISSION = 'PERMISSION',
    STORAGE = 'STORAGE',
    RENDER = 'RENDER',
    UNKNOWN = 'UNKNOWN',
  }
  
  export enum ErrorSeverity {
    LOW = 'LOW',
    MEDIUM = 'MEDIUM',
    HIGH = 'HIGH',
    CRITICAL = 'CRITICAL',
  }
  
  export interface AppError {
    id: string;
    type: ErrorType;
    message: string;
    userMessage: string;
    severity: ErrorSeverity;
    timestamp: Date;
    context?: Record<string, any>;
    recoverable: boolean;
    retryAction?: () => void;
  }
  
  export class ErrorManager {
    static getInstance(): ErrorManager;
    createError(
      type: ErrorType,
      message: string,
      userMessage: string,
      severity: ErrorSeverity,
      context?: Record<string, any>,
      recoverable?: boolean,
      retryAction?: () => void
    ): AppError;
  }
  
  export class ErrorBoundary extends React.Component<{
    children: React.ReactNode;
    fallback?: (error: AppError, retry: () => void) => React.ReactNode;
    onError?: (error: AppError) => void;
  }> {}
  
  export const errorManager: ErrorManager;
  export const financialErrorHandler: any;
}

// Real-time data fetcher types
declare module "@/utils/realTimeDataFetcher" {
  export interface RealTimeDataFetcher {
    fetchStockData(symbol: string, period?: string): Promise<any>;
    fetchMultipleStocks(symbols: string[], period?: string): Promise<any[]>;
    clearCache(): void;
    getStatus(): any;
  }
  
  export const realTimeDataFetcher: RealTimeDataFetcher;
}

// Environment variables
declare namespace NodeJS {
  interface ProcessEnv {
    EXPO_PUBLIC_API_URL?: string;
    EXPO_PUBLIC_ALPHA_VANTAGE_API_KEY?: string;
    EXPO_PUBLIC_YAHOO_FINANCE_API_KEY?: string;
    EXPO_PUBLIC_APP_ENV?: 'development' | 'staging' | 'production';
    EXPO_PUBLIC_DEBUG_MODE?: 'true' | 'false';
  }
}

export {};
